from PIL import Image
import random as random

pic1  = Image.open("Image/Diluc_smirk.jpg")
pic2  = Image.open("Image/Diluc_smirk (1).jpg")

#------------------------  Appendix  -------------------------------------------#

def partition(l, r, nums):
    pivot, ptr = nums[r], l
    for i in range(l, r):
        if nums[i] <= pivot:
            nums[i], nums[ptr] = nums[ptr], nums[i]
            ptr += 1
    nums[ptr], nums[r] = nums[r], nums[ptr]
    return ptr
def quicksort(l, r, nums):
    if len(nums) == 1:
        return nums
    if l < r:
        pi = partition(l, r, nums)
        quicksort(l, pi-1, nums)
        quicksort(pi+1, r, nums)
    return nums

def colorMatrix():
    L = []
    for i in range(256):
        L.append('0')
    return L
def containColor(L,x):
    '''
    Goal : determine wether the element is in the list or not
    Take : List and the element you want to find (obviously both the list content and the element msut have the same type)
    Return : a bool
    '''
    for i in range(len(L)):
        (RGB,occ) = L[i]
        if RGB == x:
            return (True,i)
    return (False,-1)

def inBetween(L,l,x):
    '''
    Goal : approximate a value using a list
    Take :  List of int , its length and the element you want to approximate
    Return : the value approximated form the list
    '''
    i = 0
    while i < l - 1:
        s = L[i]
        h = L[i+1]

        if x == s:
            return L[i]
        elif x == h:
            return L[i+1]

        elif s < x < h :
            mid = (h - s)//2
            if x > mid:
                return L[i+1]
            else :
                return L[i]
        else:
            i+=1

'''
print( str(pic1.height) + " " + str(pic1.width) , end = " / ")
print( str(pic2.height) + " " + str(pic2.width) )

pic2.getpixel((pic2.width-1,pic2.height-1))
'''

#-----------------------  Functions  -------------------------------------------#
colorInc = [0,127,255]
CI_l = len(colorInc)

def colorOcc(img):
    '''
    Take any type of image as input
    Return a list of all the color present and its number of occurences ( (R,G,B) , occ)
    ( (list[int], list[int], list[int]) , occ)
    '''
    (Red,Green,Blue) = (colorMatrix(),colorMatrix(),colorMatrix())
    (R,G,B) = ([],[],[])
    occ = 0

    for row in range(0,img.height):
        for col in range(0,img.width):
            #print(str(row) + " " + str(col))
            (r,g,b) = img.getpixel((col,row))
            if Red[r] == '0' or Blue[b] == '0' or Green[g] == '0':
                (Red[r],Blue[b],Green[g]) = ('1','1','1')
                occ+=1
                R.append(r)
                G.append(g)
                B.append(b)
    return ((R,G,B),occ)


def compIncrement(img):
    L = []
    for row in range(0,img.height):
        for col in range(0,img.width):
            (r,g,b) = img.getpixel((col,row))

            RGB = (inBetween(colorInc,CI_l,r),inBetween(colorInc,CI_l,g),inBetween(colorInc,CI_l,b))
            (bool,i) = containColor(L,RGB)
            if bool:
                (_,occ) = L[i]
                L[i] = (_,occ+1)
            else:
                L.append( (RGB,1) )
    return L



























































print("",end = "")
